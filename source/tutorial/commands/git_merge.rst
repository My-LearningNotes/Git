``git merge``
=============

``git merge [<commit> ...]``\ 的作用是将指定分支上(可以是多个分支)的修改, 合并到当前分支上来.

.. note::

    两个分支有共同的父节点, 将被合并的分支相对于共同父节点的\ **修改**\ 合并到当前分支上来.

    合并的基础: 有共同的父节点.


例如:
现在有两个分支\ ``A``\ 和\ ``B``\ , 当前分支是\ ``A``\ , 执行\ ``git merge B``\ 就是将\ ``B``\ 分支上当前\ *commit*\ 的修改合并到A分支上来.
更具体的说, 就是将\ ``B``\ 分支上当前\ *commit*\ 相对于共同父节点的\ **修改**\ 合并到\ ``A``\ 分支上来.


``git merge --abort``
只有当\ ``git merge``\ 产生了冲突时才能使用.
该命令会终止\ *merge*\ , 并尝试使版本库回到\ *merge*\ 之前的状态.
但是, 如果在\ *merge*\ 时, 有未提交的修改, 那么\ ``git merge --abort``\ 可能无法重构\ *merge*\ 之前的状态.
所以, 在执行\ ``merge``\ 时, 应该尽量保证没有未提交的修改.


快进式合并
----------

通常, 使用\ ``git merge``\ 合并分支之后, 会生成一个新的的\ **合并commit**\ .
但是, 如果被合并的分支是从当前分支分叉出来的, 可以使用\ ``快进式合并(Fast-Forward)``\ .

.. note::

    所谓快进式合并, 就是使当前分支指针指向被合并的分支的当前commit, 而不用生成一个合并commit.

当可以使用快进式合并时, 默认就会使用快进式合并;
如果不想使用快进式合并, 而是生成一个\ *合并commit*\ , 需要加上\ ``--no-ff``\ 选项.

